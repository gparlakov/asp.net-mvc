@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@(Html.Kendo().Grid<LibrarySystem.ViewModels.Books.BookGridVM>()
    .Name("books-grid")
    .Columns(c =>
    {
        c.Bound(b => b.ISBN).ClientTemplate("#= trimText(ISBN) #");
        c.Bound(b => b.Title).Template(b => { }).ClientTemplate("#= trimText(Title) #");
        c.Bound(b => b.Author).Template(b => { }).ClientTemplate("#= trimText(Author) #");
        c.Bound(b => b.Description).Template(b => { }).ClientTemplate("#= trimText(Description, 35) #");
        c.Bound(b => b.Category).ClientTemplate("#= trimText(Category.Name, 20) #");
        c.Command(com =>
        {
            com.Edit();
            com.Destroy();
        });
    })
    .ToolBar(tb => { tb.Create(); })
    .ClientDetailTemplateId("detailsTemplate")
    .Selectable(selectable => selectable.Mode(GridSelectionMode.Multiple))
    .Sortable()
    .Filterable(f => f.Enabled(true))
    .Editable(e =>
    {
        e.Mode(GridEditMode.PopUp);
        e.TemplateName("PopupEditorBookGrid");
        e.Window(
            w => w.Draggable(true)
                .Resizable(r => {
                    r.Enabled(true);
                })
                .Width(800)
            );
    })    
    .Pageable(p =>
    {
        p.Enabled(true);
        p.Numeric(true);
    })
    .DataSource(d =>
    {
        d.Ajax()
            .Read(r =>
            {
                r.Action("Read", "Books");
            })
            .Update(u =>
            {
                u.Action("Update", "Books");
            })
            .Destroy(destroy =>
            {
                destroy.Action("Delete", "Books");
            })
            .Create(create => create.Action("Insert", "Books").Type(HttpVerbs.Post))
            .ServerOperation(true)
            .PageSize(5)
            .Model(m =>
            {
                m.Id(mod => mod.Id);
                m.Field(f => f.Category).DefaultValue(((IEnumerable<LibrarySystem.ViewModels.Categories.CategoryVM>)ViewData["Categories"]).First());
            })
            .Events(ev => 
            {
                ev.Error("errorHandler");
            });
    })
)

<script id="detailsTemplate" type="text/x-kendo-template">
    <h5>#: Title #</h5>
    <h6>by #: Author#</h6>
    <p><a href="#: Url #">#: Url #</a></p>
    <p>#: ISBN #</p>
    <p>#: Description #</p>
</script>

<script>
    function trimText(text, length){
        length = length || 20;
        if (!text) {
            return text;
        }
        text = $.trim(text);
        if (text.length <= length)
        {
            return kendo.htmlEncode(text);
        }

        var parsedText = "<span title='" + text.replace("'","`") + "'> " + kendo.htmlEncode(text.substr(0, length)) + "...</span>";
        return parsedText;
    }

    function errorHandler(e) {
        $("#error-message").text(e.xhr.responseText);
    }
</script>